#' Hsapiens <- BSgenome.Hsapiens.UCSC.hg38::BSgenome.Hsapiens.UCSC.hg38
#' txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene::TxDb.Hsapiens.UCSC.hg38.knownGene
#' fiveprimeutr <- GenomicFeatures::fiveUTRsByTranscript(txdb)
#' exons <- GenomicRanges::GRanges(c("chr1:65419-65432:+",
#' "chr1:925731-925800:+","chr1:923928-924431:+"))
#' SequenceCounter(Hsapiens, fiveprimeutr, exons)
#'
#' @export
SequenceCounter <- function(Genome, GenRegion, SeqSet) {
if (!(getBSGenome(Genome) == getGRGenome(GenRegion))) {
stop("The genomic region is not from the inserted reference genome!")
}
else if (VerifyMatch(GenRegion, SeqSet) == FALSE) {
stop("The set inserted contains non-matching sequences")
}
else {
Counter <- countOverlaps(SeqSet, GenRegion, type = "within")
if (PartialOverlap(GenRegion, SeqSet) == TRUE) {
print("WARNING: The set inserted contains partial overlapping sequences")
}
for (i in seq(1:length(Counter))) {
return(paste0("The sequence ", i, " match ", Counter, " times."))
return(length(Counter))
}
}
}
SequenceCounter(Hsapiens, fiveprimeutr, exons)
SequenceCounter(Hsapiens, fiveprimeutr, exons)
#' @examples
#'
#' Hsapiens <- BSgenome.Hsapiens.UCSC.hg38::BSgenome.Hsapiens.UCSC.hg38
#' txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene::TxDb.Hsapiens.UCSC.hg38.knownGene
#' fiveprimeutr <- GenomicFeatures::fiveUTRsByTranscript(txdb)
#' exons <- GenomicRanges::GRanges(c("chr1:65419-65432:+",
#' "chr1:925731-925800:+","chr1:923928-924431:+"))
#' SequenceCounter(Hsapiens, fiveprimeutr, exons)
#'
#' @export
SequenceCounter <- function(Genome, GenRegion, SeqSet) {
if (!(getBSGenome(Genome) == getGRGenome(GenRegion))) {
stop("The genomic region is not from the inserted reference genome!")
}
else if (VerifyMatch(GenRegion, SeqSet) == FALSE) {
stop("The set inserted contains non-matching sequences")
}
else {
Counter <- countOverlaps(SeqSet, GenRegion, type = "within")
if (PartialOverlap(GenRegion, SeqSet) == TRUE) {
print("WARNING: The set inserted contains partial overlapping sequences")
}
for (i in seq(1:length(SeqSet))) {
return(paste0("The sequence ", i, " match ", Counter, " times."))
}
}
}
SequenceCounter(Hsapiens, fiveprimeutr, exons)
length(exons)
#' @examples
#'
#' Hsapiens <- BSgenome.Hsapiens.UCSC.hg38::BSgenome.Hsapiens.UCSC.hg38
#' txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene::TxDb.Hsapiens.UCSC.hg38.knownGene
#' fiveprimeutr <- GenomicFeatures::fiveUTRsByTranscript(txdb)
#' exons <- GenomicRanges::GRanges(c("chr1:65419-65432:+",
#' "chr1:925731-925800:+","chr1:923928-924431:+"))
#' SequenceCounter(Hsapiens, fiveprimeutr, exons)
#'
#' @export
SequenceCounter <- function(Genome, GenRegion, SeqSet) {
if (!(getBSGenome(Genome) == getGRGenome(GenRegion))) {
stop("The genomic region is not from the inserted reference genome!")
}
else if (VerifyMatch(GenRegion, SeqSet) == FALSE) {
stop("The set inserted contains non-matching sequences")
}
else {
Counter <- countOverlaps(SeqSet, GenRegion, type = "within")
if (PartialOverlap(GenRegion, SeqSet) == TRUE) {
print("WARNING: The set inserted contains partial overlapping sequences")
}
for (i in seq(1:length(SeqSet))) {
return(paste0("The sequence ", i, " match ", Counter, " times."))
}
}
}
length(exons)
SequenceCounter(Hsapiens, fiveprimeutr, exons)
#' @examples
#'
#' Hsapiens <- BSgenome.Hsapiens.UCSC.hg38::BSgenome.Hsapiens.UCSC.hg38
#' txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene::TxDb.Hsapiens.UCSC.hg38.knownGene
#' fiveprimeutr <- GenomicFeatures::fiveUTRsByTranscript(txdb)
#' exons <- GenomicRanges::GRanges(c("chr1:65419-65432:+",
#' "chr1:925731-925800:+","chr1:923928-924431:+"))
#' SequenceCounter(Hsapiens, fiveprimeutr, exons)
#'
#' @export
SequenceCounter <- function(Genome, GenRegion, SeqSet) {
if (!(getBSGenome(Genome) == getGRGenome(GenRegion))) {
stop("The genomic region is not from the inserted reference genome!")
}
else if (VerifyMatch(GenRegion, SeqSet) == FALSE) {
stop("The set inserted contains non-matching sequences")
}
else {
Counter <- countOverlaps(SeqSet, GenRegion, type = "within")
if (PartialOverlap(GenRegion, SeqSet) == TRUE) {
print("WARNING: The set inserted contains partial overlapping sequences")
}
for (i in seq(1:length(SeqSet))) {
return(paste0("The sequence ",length(SeqSet)[i], " match ", Counter, " times."))
}
}
}
SequenceCounter(Hsapiens, fiveprimeutr, exons)
#' @examples
#'
#' Hsapiens <- BSgenome.Hsapiens.UCSC.hg38::BSgenome.Hsapiens.UCSC.hg38
#' txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene::TxDb.Hsapiens.UCSC.hg38.knownGene
#' fiveprimeutr <- GenomicFeatures::fiveUTRsByTranscript(txdb)
#' exons <- GenomicRanges::GRanges(c("chr1:65419-65432:+",
#' "chr1:925731-925800:+","chr1:923928-924431:+"))
#' SequenceCounter(Hsapiens, fiveprimeutr, exons)
#'
#' @export
SequenceCounter <- function(Genome, GenRegion, SeqSet) {
if (!(getBSGenome(Genome) == getGRGenome(GenRegion))) {
stop("The genomic region is not from the inserted reference genome!")
}
else if (VerifyMatch(GenRegion, SeqSet) == FALSE) {
stop("The set inserted contains non-matching sequences")
}
else {
Counter <- countOverlaps(SeqSet, GenRegion, type = "within")
if (PartialOverlap(GenRegion, SeqSet) == TRUE) {
print("WARNING: The set inserted contains partial overlapping sequences")
}
for (i in range(1:length(SeqSet))) {
return(paste0("The sequence ",length(SeqSet)[i], " match ", Counter, " times."))
}
}
}
source('C:/Users/flavi/OneDrive/Desktop/BCG/Secondo Semestre/Scientific Programming/SeqCounter/R/SeqCounter.R', echo=TRUE)
#' @examples
#'
#' Hsapiens <- BSgenome.Hsapiens.UCSC.hg38::BSgenome.Hsapiens.UCSC.hg38
#' txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene::TxDb.Hsapiens.UCSC.hg38.knownGene
#' fiveprimeutr <- GenomicFeatures::fiveUTRsByTranscript(txdb)
#' exons <- GenomicRanges::GRanges(c("chr1:65419-65432:+",
#' "chr1:925731-925800:+","chr1:923928-924431:+"))
#' SequenceCounter(Hsapiens, fiveprimeutr, exons)
#'
#' @export
SequenceCounter <- function(Genome, GenRegion, SeqSet) {
if (!(getBSGenome(Genome) == getGRGenome(GenRegion))) {
stop("The genomic region is not from the inserted reference genome!")
}
else if (VerifyMatch(GenRegion, SeqSet) == FALSE) {
stop("The set inserted contains non-matching sequences")
}
else {
Counter <- countOverlaps(SeqSet, GenRegion, type = "within")
if (PartialOverlap(GenRegion, SeqSet) == TRUE) {
print("WARNING: The set inserted contains partial overlapping sequences")
}
for (i in range(1:length(SeqSet))) {
return(paste0("The sequence ",i, " match ", Counter, " times."))
}
}
}
SequenceCounter(Hsapiens, fiveprimeutr, exons)
#' @examples
#'
#' Hsapiens <- BSgenome.Hsapiens.UCSC.hg38::BSgenome.Hsapiens.UCSC.hg38
#' txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene::TxDb.Hsapiens.UCSC.hg38.knownGene
#' fiveprimeutr <- GenomicFeatures::fiveUTRsByTranscript(txdb)
#' exons <- GenomicRanges::GRanges(c("chr1:65419-65432:+",
#' "chr1:925731-925800:+","chr1:923928-924431:+"))
#' SequenceCounter(Hsapiens, fiveprimeutr, exons)
#'
#' @export
SequenceCounter <- function(Genome, GenRegion, SeqSet) {
if (!(getBSGenome(Genome) == getGRGenome(GenRegion))) {
stop("The genomic region is not from the inserted reference genome!")
}
else if (VerifyMatch(GenRegion, SeqSet) == FALSE) {
stop("The set inserted contains non-matching sequences")
}
else {
Counter <- countOverlaps(SeqSet, GenRegion, type = "within")
if (PartialOverlap(GenRegion, SeqSet) == TRUE) {
print("WARNING: The set inserted contains partial overlapping sequences")
}
for (i in range(1:length(SeqSet))) {
return(paste0("The sequence ",i, " match ", Counter, " times."))
}
}
}
SequenceCounter(Hsapiens, fiveprimeutr, exons)
length(exons)
for (i in exons) {
return(i)
}
range(1:length(exons))
seq(1:length(exons))
for (i in seq(1:length(exons))) {
return(i)
}
for (i in seq(1:length(exons))) {
return(i)
}
for (i in seq(1:length(exons))) {
print(i)
}
#' @examples
#'
#' Hsapiens <- BSgenome.Hsapiens.UCSC.hg38::BSgenome.Hsapiens.UCSC.hg38
#' txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene::TxDb.Hsapiens.UCSC.hg38.knownGene
#' fiveprimeutr <- GenomicFeatures::fiveUTRsByTranscript(txdb)
#' exons <- GenomicRanges::GRanges(c("chr1:65419-65432:+",
#' "chr1:925731-925800:+","chr1:923928-924431:+"))
#' SequenceCounter(Hsapiens, fiveprimeutr, exons)
#'
#' @export
SequenceCounter <- function(Genome, GenRegion, SeqSet) {
if (!(getBSGenome(Genome) == getGRGenome(GenRegion))) {
stop("The genomic region is not from the inserted reference genome!")
}
else if (VerifyMatch(GenRegion, SeqSet) == FALSE) {
stop("The set inserted contains non-matching sequences")
}
else {
Counter <- countOverlaps(SeqSet, GenRegion, type = "within")
if (PartialOverlap(GenRegion, SeqSet) == TRUE) {
print("WARNING: The set inserted contains partial overlapping sequences")
}
for (i in range(1:length(SeqSet))) {
paste0("The sequence ",i, " match ", Counter, " times.")
}
}
}
#' @examples
#'
#' Hsapiens <- BSgenome.Hsapiens.UCSC.hg38::BSgenome.Hsapiens.UCSC.hg38
#' txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene::TxDb.Hsapiens.UCSC.hg38.knownGene
#' fiveprimeutr <- GenomicFeatures::fiveUTRsByTranscript(txdb)
#' exons <- GenomicRanges::GRanges(c("chr1:65419-65432:+",
#' "chr1:925731-925800:+","chr1:923928-924431:+"))
#' SequenceCounter(Hsapiens, fiveprimeutr, exons)
#'
#' @export
SequenceCounter <- function(Genome, GenRegion, SeqSet) {
if (!(getBSGenome(Genome) == getGRGenome(GenRegion))) {
stop("The genomic region is not from the inserted reference genome!")
}
else if (VerifyMatch(GenRegion, SeqSet) == FALSE) {
stop("The set inserted contains non-matching sequences")
}
else {
Counter <- countOverlaps(SeqSet, GenRegion, type = "within")
if (PartialOverlap(GenRegion, SeqSet) == TRUE) {
print("WARNING: The set inserted contains partial overlapping sequences")
}
for (i in seq(1:length(SeqSet))) {
paste0("The sequence ",i, " match ", Counter, " times.")
}
}
}
SequenceCounter(Hsapiens, fiveprimeutr, exons)
#' @examples
#'
#' Hsapiens <- BSgenome.Hsapiens.UCSC.hg38::BSgenome.Hsapiens.UCSC.hg38
#' txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene::TxDb.Hsapiens.UCSC.hg38.knownGene
#' fiveprimeutr <- GenomicFeatures::fiveUTRsByTranscript(txdb)
#' exons <- GenomicRanges::GRanges(c("chr1:65419-65432:+",
#' "chr1:925731-925800:+","chr1:923928-924431:+"))
#' SequenceCounter(Hsapiens, fiveprimeutr, exons)
#'
#' @export
SequenceCounter <- function(Genome, GenRegion, SeqSet) {
if (!(getBSGenome(Genome) == getGRGenome(GenRegion))) {
stop("The genomic region is not from the inserted reference genome!")
}
else if (VerifyMatch(GenRegion, SeqSet) == FALSE) {
stop("The set inserted contains non-matching sequences")
}
else {
Counter <- countOverlaps(SeqSet, GenRegion, type = "within")
if (PartialOverlap(GenRegion, SeqSet) == TRUE) {
print("WARNING: The set inserted contains partial overlapping sequences")
}
for (i in seq(1:length(SeqSet))) {
print(paste0("The sequence ",i, " match ", Counter, " times."))
}
}
}
SequenceCounter(Hsapiens, fiveprimeutr, exons)
#' @examples
#'
#' Hsapiens <- BSgenome.Hsapiens.UCSC.hg38::BSgenome.Hsapiens.UCSC.hg38
#' txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene::TxDb.Hsapiens.UCSC.hg38.knownGene
#' fiveprimeutr <- GenomicFeatures::fiveUTRsByTranscript(txdb)
#' exons <- GenomicRanges::GRanges(c("chr1:65419-65432:+",
#' "chr1:925731-925800:+","chr1:923928-924431:+"))
#' SequenceCounter(Hsapiens, fiveprimeutr, exons)
#'
#' @export
SequenceCounter <- function(Genome, GenRegion, SeqSet) {
if (!(getBSGenome(Genome) == getGRGenome(GenRegion))) {
stop("The genomic region is not from the inserted reference genome!")
}
else if (VerifyMatch(GenRegion, SeqSet) == FALSE) {
stop("The set inserted contains non-matching sequences")
}
else {
Counter <- countOverlaps(SeqSet, GenRegion, type = "within")
if (PartialOverlap(GenRegion, SeqSet) == TRUE) {
print("WARNING: The set inserted contains partial overlapping sequences")
}
for (i in seq(1:length(SeqSet))) {
print(unique(paste0("The sequence ",i, " match ", Counter, " times.")))
}
}
}
SequenceCounter(Hsapiens, fiveprimeutr, exons)
#' @examples
#'
#' Hsapiens <- BSgenome.Hsapiens.UCSC.hg38::BSgenome.Hsapiens.UCSC.hg38
#' txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene::TxDb.Hsapiens.UCSC.hg38.knownGene
#' fiveprimeutr <- GenomicFeatures::fiveUTRsByTranscript(txdb)
#' exons <- GenomicRanges::GRanges(c("chr1:65419-65432:+",
#' "chr1:925731-925800:+","chr1:923928-924431:+"))
#' SequenceCounter(Hsapiens, fiveprimeutr, exons)
#'
#' @export
SequenceCounter <- function(Genome, GenRegion, SeqSet) {
if (!(getBSGenome(Genome) == getGRGenome(GenRegion))) {
stop("The genomic region is not from the inserted reference genome!")
}
else if (VerifyMatch(GenRegion, SeqSet) == FALSE) {
stop("The set inserted contains non-matching sequences")
}
else {
Counter <- countOverlaps(SeqSet, GenRegion, type = "within")
if (PartialOverlap(GenRegion, SeqSet) == TRUE) {
print("WARNING: The set inserted contains partial overlapping sequences")
}
for (i in seq(1:length(SeqSet))) {
print(unique(paste0("The sequence ",i, " match ", Counter[i], " times.")))
}
}
}
SequenceCounter(Hsapiens, fiveprimeutr, exons)
exons <- GenomicRanges::GRanges(c("chr1:65419-65432:+","chr1:925729-925800:+","chr1:923928-924431:+"))
SequenceCounter(Hsapiens, fiveprimeutr, exons)
devtools::document()
remove(list = ls())
devtools::document()
library(BiocCheck)
BiocCheck()
?seq_len
#' @examples
#'
#' Hsapiens <- BSgenome.Hsapiens.UCSC.hg38::BSgenome.Hsapiens.UCSC.hg38
#' txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene::TxDb.Hsapiens.UCSC.hg38.knownGene
#' fiveprimeutr <- GenomicFeatures::fiveUTRsByTranscript(txdb)
#' exons <- GenomicRanges::GRanges(c("chr1:65419-65432:+",
#' "chr1:925731-925800:+","chr1:923928-924431:+"))
#' SequenceCounter(Hsapiens, fiveprimeutr, exons)
#'
#' @export
SequenceCounter <- function(Genome, GenRegion, SeqSet) {
if (!(getBSGenome(Genome) == getGRGenome(GenRegion))) {
stop("The genomic region is not from the inserted reference genome!")
}
else if (VerifyMatch(GenRegion, SeqSet) == FALSE) {
stop("The set inserted contains non-matching sequences")
}
else {
Counter <- countOverlaps(SeqSet, GenRegion, type = "within")
if (PartialOverlap(GenRegion, SeqSet) == TRUE) {
print("WARNING: The set inserted contains partial overlapping sequences")
}
for (i in seq_len(1,length(SeqSet))) {
print(unique(paste0("The sequence ",i, " match ", Counter[i], " times.")))
}
}
}
SequenceCounter(Hsapiens, fiveprimeutr, exons)
library(SeqCounter)
remove(SequenceCounter())
remove(SequenceCounter)
exons <- GenomicRanges::GRanges(c("chr1:65419-65432:+","chr1:925731-925800:+","chr1:923928-924431:+"))
for (i in seq_len(from = 1, to = length(exons)) {
for (i in seq_len(from = 1, to = length(exons)) {
for (i in seq_len(from = 1, to = length(exons)) {
for (i in seq_len(from = 1, to = length(exons)) {
for (i in seq_len(from = 1, to = length(exons)) {
for (i in seq_len(from = 1, to = length(exons))) {
print(unique(paste0("The sequence ",i, " match ", Counter[i], " times.")))
}
seq_len(exons)
seq_len(1,length(exons))
seq_len(length(exons))
library(SeqCounter)
browseVignettes("SeqCounter")
#' @examples
#'
#' Hsapiens <- BSgenome.Hsapiens.UCSC.hg38::BSgenome.Hsapiens.UCSC.hg38
#' txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene::TxDb.Hsapiens.UCSC.hg38.knownGene
#' fiveprimeutr <- GenomicFeatures::fiveUTRsByTranscript(txdb)
#' exons <- GenomicRanges::GRanges(c("chr1:65419-65432:+",
#' "chr1:925731-925800:+","chr1:923928-924431:+"))
#' SequenceCounter(Hsapiens, fiveprimeutr, exons)
#'
#' @export
SequenceCounter <- function(Genome, GenRegion, SeqSet) {
if (!(getBSGenome(Genome) == getGRGenome(GenRegion))) {
stop("The genomic region is not from the inserted reference genome!")
}
else if (VerifyMatch(GenRegion, SeqSet) == FALSE) {
stop("The set inserted contains non-matching sequences")
}
else {
Counter <- countOverlaps(SeqSet, GenRegion, type = "within")
if (PartialOverlap(GenRegion, SeqSet) == TRUE) {
print("WARNING: The set inserted contains partial overlapping sequences")
}
for (i in seq_len(length(SeqSet))) {
print(unique(paste0("The sequence ",i, " matches in ", GenRegion," ", Counter[i], " times.")))
}
}
}
fiveprimeutr <- GenomicFeatures::fiveUTRsByTranscript(txdb)
Hsapiens <- BSgenome.Hsapiens.UCSC.hg38::BSgenome.Hsapiens.UCSC.hg38
txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene::TxDb.Hsapiens.UCSC.hg38.knownGene
fiveprimeutr <- GenomicFeatures::fiveUTRsByTranscript(txdb)
SequenceCounter(Hsapiens, fiveprimeutr, exons)
getBSGenome <- function (genome) {
return(metadata(genome)$genome)
}
getGRGenome <- function(GRangesobj) {
return(unique(seqinfo(GRangesobj)@genome))
}
VerifyMatch <- function (GenRegion, SeqSet) {
all((countOverlaps(SeqSet, GenRegion, minoverlap = 1) >= 1))
}
PartialOverlap <- function(GenRegion, SeqSet) {
!all(countOverlaps(SeqSet, GenRegion, type = "within"))
}
SequenceCounter(Hsapiens, fiveprimeutr, exons)
#' @examples
#'
#' Hsapiens <- BSgenome.Hsapiens.UCSC.hg38::BSgenome.Hsapiens.UCSC.hg38
#' txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene::TxDb.Hsapiens.UCSC.hg38.knownGene
#' fiveprimeutr <- GenomicFeatures::fiveUTRsByTranscript(txdb)
#' exons <- GenomicRanges::GRanges(c("chr1:65419-65432:+",
#' "chr1:925731-925800:+","chr1:923928-924431:+"))
#' SequenceCounter(Hsapiens, fiveprimeutr, exons)
#'
#' @export
SequenceCounter <- function(Genome, GenRegion, SeqSet) {
if (!(getBSGenome(Genome) == getGRGenome(GenRegion))) {
stop("The genomic region is not from the inserted reference genome!")
}
else if (VerifyMatch(GenRegion, SeqSet) == FALSE) {
stop("The set inserted contains non-matching sequences")
}
else {
Counter <- countOverlaps(SeqSet, GenRegion, type = "within")
if (PartialOverlap(GenRegion, SeqSet) == TRUE) {
print("WARNING: The set inserted contains partial overlapping sequences")
}
for (i in seq_len(length(SeqSet))) {
print(unique(paste0("The sequence ",i,"matches ", Counter[i], " times.")))
}
}
}
SequenceCounter(Hsapiens, fiveprimeutr, exons)
#' @examples
#'
#' Hsapiens <- BSgenome.Hsapiens.UCSC.hg38::BSgenome.Hsapiens.UCSC.hg38
#' txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene::TxDb.Hsapiens.UCSC.hg38.knownGene
#' fiveprimeutr <- GenomicFeatures::fiveUTRsByTranscript(txdb)
#' exons <- GenomicRanges::GRanges(c("chr1:65419-65432:+",
#' "chr1:925731-925800:+","chr1:923928-924431:+"))
#' SequenceCounter(Hsapiens, fiveprimeutr, exons)
#'
#' @export
SequenceCounter <- function(Genome, GenRegion, SeqSet) {
if (!(getBSGenome(Genome) == getGRGenome(GenRegion))) {
stop("The genomic region is not from the inserted reference genome!")
}
else if (VerifyMatch(GenRegion, SeqSet) == FALSE) {
stop("The set inserted contains non-matching sequences")
}
else {
Counter <- countOverlaps(SeqSet, GenRegion, type = "within")
if (PartialOverlap(GenRegion, SeqSet) == TRUE) {
print("WARNING: The set inserted contains partial overlapping sequences")
}
for (i in seq_len(length(SeqSet))) {
print(unique(paste0("The sequence ",i," matches ", Counter[i], " times.")))
}
}
}
SequenceCounter(Hsapiens, fiveprimeutr, exons)
remove(list = ls())
library(SeqCounter)
browseVignettes("SeqCounter"ù)
browseVignettes("SeqCounter")
install.packages("C:/Users/flavi/OneDrive/Desktop/BCG/Secondo Semestre/Scientific Programming/SeqCounter_0.99.0.tar.gz", repos = NULL, type = "source")
library(SeqCounter)
